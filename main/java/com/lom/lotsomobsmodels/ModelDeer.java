// Date: 05.10.2012 09:41:08
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package com.lom.lotsomobsmodels;

import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

import org.lwjgl.opengl.GL11;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;


@SideOnly(Side.CLIENT)
public class ModelDeer extends ModelLOMBase
{
  //fields
    ModelRenderer Body;
    ModelRenderer Leg1;
    ModelRenderer Leg2;
    ModelRenderer Leg3;
    ModelRenderer Leg4;
    ModelRenderer Tail;
    ModelRenderer Head;
    ModelRenderer Nose;
    ModelRenderer Horn1;
    ModelRenderer Horn2;
    ModelRenderer Horn3;
    ModelRenderer Horn4;
  
  public ModelDeer()
  {
    textureWidth = 64;
    textureHeight = 32;
    
      Body = new ModelRenderer(this, 0, 0);
      Body.addBox(-6F, -10F, -7F, 8, 18, 9);
      Body.setRotationPoint(2F, 5F, 2F);
      Body.setTextureSize(64, 32);
      Body.mirror = true;
      setRotation(Body, 1.570796F, 0F, 0F);
      Leg1 = new ModelRenderer(this, 34, 0);
      Leg1.addBox(-2F, 0F, -3F, 3, 12, 3);
      Leg1.setRotationPoint(-2F, 12F, -5F);
      Leg1.setTextureSize(64, 32);
      Leg1.mirror = true;
      setRotation(Leg1, 0F, 0F, 0F);
      Leg2 = new ModelRenderer(this, 34, 0);
      Leg2.addBox(-1F, 0F, -3F, 3, 12, 3);
      Leg2.setRotationPoint(2F, 12F, -5F);
      Leg2.setTextureSize(64, 32);
      Leg2.mirror = true;
      setRotation(Leg2, 0F, 0F, 0F);
      Leg3 = new ModelRenderer(this, 34, 0);
      Leg3.addBox(-3F, 0F, -2F, 3, 12, 3);
      Leg3.setRotationPoint(-1F, 12F, 7F);
      Leg3.setTextureSize(64, 32);
      Leg3.mirror = true;
      setRotation(Leg3, 0F, 0F, 0F);
      Leg4 = new ModelRenderer(this, 34, 0);
      Leg4.addBox(-1F, 0F, -2F, 3, 12, 3);
      Leg4.setRotationPoint(2F, 12F, 7F);
      Leg4.setTextureSize(64, 32);
      Leg4.mirror = true;
      setRotation(Leg4, 0F, 0F, 0F);
      Tail = new ModelRenderer(this, 34, 15);
      Tail.addBox(0F, 0F, 0F, 2, 1, 2);
      Tail.setRotationPoint(-1F, 5F, 10F);
      Tail.setTextureSize(64, 32);
      Tail.mirror = true;
      setRotation(Tail, 0F, 0F, 0F);
      Head = new ModelRenderer(this, 34, 18);
      Head.addBox(-4F, -4F, -4F, 6, 5, 4);
      Head.setRotationPoint(1F, 4F, -8F);
      Head.setTextureSize(64, 32);
      Head.mirror = true;
      setRotation(Head, 0F, 0F, 0F);
      Nose = new ModelRenderer(this, 46, 0);
      Nose.addBox(-1F, -1F, -4F, 2, 2, 4);
      Nose.setRotationPoint(0F, 3F, -12F);
      Nose.setTextureSize(64, 32);
      Nose.mirror = true;
      setRotation(Nose, 0F, 0F, 0F);
      Horn1 = new ModelRenderer(this, 58, 0);
      Horn1.addBox(3F, -5F, -4F, 1, 3, 1);
      Horn1.setRotationPoint(0F, 3F, -7F);
      Horn1.setTextureSize(64, 32);
      Horn1.mirror = true;
      setRotation(Horn1, 0F, 0F, 0F);
      Horn2 = new ModelRenderer(this, 58, 0);
      Horn2.addBox(-4F, -5F, -4F, 1, 3, 1);
      Horn2.setRotationPoint(0F, 3F, -7F);
      Horn2.setTextureSize(64, 32);
      Horn2.mirror = true;
      setRotation(Horn2, 0F, 0F, 0F);
      Horn3 = new ModelRenderer(this, 46, 6);
      Horn3.addBox(0F, -6F, -1F, 1, 7, 1);
      Horn3.setRotationPoint(4F, -1F, -10F);
      Horn3.setTextureSize(64, 32);
      Horn3.mirror = true;
      setRotation(Horn3, 0F, 0F, 0F);
      Horn4 = new ModelRenderer(this, 46, 6);
      Horn4.addBox(-1F, -6F, 0F, 1, 7, 1);
      Horn4.setRotationPoint(-4F, -1F, -11F);
      Horn4.setTextureSize(64, 32);
      Horn4.mirror = true;
      setRotation(Horn4, 0F, 0F, 0F);
      
      this.addChildTo(Horn2, Head);
      this.addChildTo(Horn1, Head);
      this.addChildTo(Horn3, Head);
      this.addChildTo(Horn4, Head);
      this.addChildTo(Nose, Head);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5);
    if (this.isChild)
    {
        float var8 = 2.0F;
        GL11.glPushMatrix();
        GL11.glTranslatef(0.0F, 5.0F * f5, 2.0F * f5);
        GL11.glPopMatrix();
        GL11.glPushMatrix();
        GL11.glScalef(1.0F / var8, 1.0F / var8, 1.0F / var8);
        GL11.glTranslatef(0.0F, 24.0F * f5, 0.0F);
        Body.render(f5);
        Leg1.render(f5);
        Leg2.render(f5);
        Leg3.render(f5);
        Leg4.render(f5);
        Tail.render(f5);
        Head.render(f5);
        //Nose.render(f5);
        //Horn1.render(f5);
        //Horn2.render(f5);
        //Horn3.render(f5);
        //Horn4.render(f5);
        GL11.glPopMatrix();
        
    }
    else
    {
    Body.render(f5);
    Leg1.render(f5);
    Leg2.render(f5);
    Leg3.render(f5);
    Leg4.render(f5);
    Tail.render(f5);
    Head.render(f5);
   /* Nose.render(f5);
    Horn1.render(f5);
    Horn2.render(f5);
    Horn3.render(f5);
    Horn4.render(f5);
*/    }
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, null);
    Tail.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;

    this.Head.rotateAngleX = f4 / (180F / (float)Math.PI);
    this.Head.rotateAngleY = f3 / (180F / (float)Math.PI);
    this.Body.rotateAngleX = ((float)Math.PI / 2F);
    this.Leg1.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
    this.Leg2.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 1.4F * f1;
    this.Leg3.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 1.4F * f1;
    this.Leg4.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
  }

}
